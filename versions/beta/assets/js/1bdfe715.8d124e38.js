"use strict";(self.webpackChunkmongodb_memory_server_website=self.webpackChunkmongodb_memory_server_website||[]).push([[99],{3905:function(e,n,t){t.d(n,{Zo:function(){return d},kt:function(){return g}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),p=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d=function(e){var n=p(e.components);return r.createElement(l.Provider,{value:n},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),c=p(t),m=a,g=c["".concat(l,".").concat(m)]||c[m]||u[m]||o;return t?r.createElement(g,i(i({ref:n},d),{},{components:t})):r.createElement(g,i({ref:n},d))}));function g(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=m;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[c]="string"==typeof e?e:a,i[1]=s;for(var p=2;p<o;p++)i[p]=t[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},9927:function(e,n,t){t.r(n),t.d(n,{assets:function(){return d},contentTitle:function(){return l},default:function(){return g},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return c}});var r=t(7462),a=t(3366),o=(t(7294),t(3905)),i=["components"],s={id:"mongo-instance",title:"MongoInstance"},l=void 0,p={unversionedId:"api/classes/mongo-instance",id:"api/classes/mongo-instance",title:"MongoInstance",description:"API Documentation of MongoInstance-Class",source:"@site/../docs/api/classes/mongo-instance.md",sourceDirName:"api/classes",slug:"/api/classes/mongo-instance",permalink:"/mongodb-memory-server/versions/beta/docs/api/classes/mongo-instance",draft:!1,editUrl:"https://github.com/typegoose/mongodb-memory-server/edit/master/docs/../docs/api/classes/mongo-instance.md",tags:[],version:"current",frontMatter:{id:"mongo-instance",title:"MongoInstance"},sidebar:"api",previous:{title:"MongoMemoryReplSet",permalink:"/mongodb-memory-server/versions/beta/docs/api/classes/mongo-memory-replset"},next:{title:"MongoBinary",permalink:"/mongodb-memory-server/versions/beta/docs/api/classes/mongo-binary"}},d={},c=[{value:"Functions",id:"functions",level:2},{value:"new",id:"new",level:3},{value:"debug",id:"debug",level:3},{value:"create",id:"create",level:3},{value:"prepareCommandArgs",id:"preparecommandargs",level:3},{value:"start",id:"start",level:3},{value:"stop",id:"stop",level:3},{value:"_launchMongod",id:"_launchmongod",level:3},{value:"_launchKiller",id:"_launchkiller",level:3},{value:"errorHandler",id:"errorhandler",level:3},{value:"closeHandler",id:"closehandler",level:3},{value:"stderrHandler",id:"stderrhandler",level:3},{value:"stdoutHandler",id:"stdouthandler",level:3},{value:"Values",id:"values",level:2},{value:"instanceOpts",id:"instanceopts",level:3},{value:"binaryOpts",id:"binaryopts",level:3},{value:"spawnOpts",id:"spawnopts",level:3},{value:"extraConnectionOptions",id:"extraconnectionoptions",level:3},{value:"mongodProcess",id:"mongodprocess",level:3},{value:"killerProcess",id:"killerprocess",level:3},{value:"isInstancePrimary",id:"isinstanceprimary",level:3},{value:"isInstanceReady",id:"isinstanceready",level:3},{value:"isReplSet",id:"isreplset",level:3}],u={toc:c},m="wrapper";function g(e){var n=e.components,t=(0,a.Z)(e,i);return(0,o.kt)(m,(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"API Documentation of ",(0,o.kt)("inlineCode",{parentName:"p"},"MongoInstance"),"-Class"),(0,o.kt)("h2",{id:"functions"},"Functions"),(0,o.kt)("h3",{id:"new"},"new"),(0,o.kt)("p",null,"Typings: ",(0,o.kt)("inlineCode",{parentName:"p"},"constructor(opts: Partial<MongodOpts>)")),(0,o.kt)("p",null,"Create an new Instance without starting it"),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"When directly starting the instance, ",(0,o.kt)("a",{parentName:"p",href:"#static-run"},(0,o.kt)("inlineCode",{parentName:"a"},"run"))," should be used")),(0,o.kt)("h3",{id:"debug"},"debug"),(0,o.kt)("p",null,"Typings: ",(0,o.kt)("inlineCode",{parentName:"p"},"private debug(msg: string): void")),(0,o.kt)("p",null,"Format input with debug-message template"),(0,o.kt)("h3",{id:"create"},"create"),(0,o.kt)("p",null,"Typings: ",(0,o.kt)("inlineCode",{parentName:"p"},"static async create(opts: Partial<MongodOpts>): Promise<MongoInstance>")),(0,o.kt)("p",null,"Create an new Instance and start it (while being an Promise)"),(0,o.kt)("h3",{id:"preparecommandargs"},"prepareCommandArgs"),(0,o.kt)("p",null,"Typings: ",(0,o.kt)("inlineCode",{parentName:"p"},"prepareCommandArgs(): string[]")),(0,o.kt)("p",null,"Constructs the Command Arguments"),(0,o.kt)("h3",{id:"start"},"start"),(0,o.kt)("p",null,"Typings: ",(0,o.kt)("inlineCode",{parentName:"p"},"async start(): Promise<void>")),(0,o.kt)("p",null,"Start the ",(0,o.kt)("inlineCode",{parentName:"p"},"mongod")," and the watcher processes"),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"Currently does not check if the instance is in a correct state and just resets all values, see ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/typegoose/mongodb-memory-server/issues/662"},"#662"),".")),(0,o.kt)("h3",{id:"stop"},"stop"),(0,o.kt)("p",null,"Typings: ",(0,o.kt)("inlineCode",{parentName:"p"},"async stop(): Promise<boolean>")),(0,o.kt)("p",null,"Stop the ",(0,o.kt)("inlineCode",{parentName:"p"},"mongod")," and the watcher processes"),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"Will not Error if instance is not running")),(0,o.kt)("h3",{id:"_launchmongod"},"_launchMongod"),(0,o.kt)("span",{class:"badge badge--warning"},"Internal"),(0,o.kt)("p",null,"Typings: ",(0,o.kt)("inlineCode",{parentName:"p"},"_launchMongod(mongoBin: string): ChildProcess")),(0,o.kt)("p",null,"Actually spawn the ",(0,o.kt)("inlineCode",{parentName:"p"},"mongod")," process with ",(0,o.kt)("inlineCode",{parentName:"p"},"ChildProcess"),", used by ",(0,o.kt)("a",{parentName:"p",href:"#run"},(0,o.kt)("inlineCode",{parentName:"a"},"run"))),(0,o.kt)("h3",{id:"_launchkiller"},"_launchKiller"),(0,o.kt)("span",{class:"badge badge--warning"},"Internal"),(0,o.kt)("p",null,"Typings: ",(0,o.kt)("inlineCode",{parentName:"p"},"_launchKiller(parentPid: number, childPid: number): ChildProcess")),(0,o.kt)("p",null,"Spawn an killer process that keeps watch over the ",(0,o.kt)("inlineCode",{parentName:"p"},"mongod")," process"),(0,o.kt)("h3",{id:"errorhandler"},"errorHandler"),(0,o.kt)("span",{class:"badge badge--warning"},"Internal"),(0,o.kt)("p",null,"Typings: ",(0,o.kt)("inlineCode",{parentName:"p"},"errorHandler(err: string): void")),(0,o.kt)("p",null,"Error handler for the ",(0,o.kt)("inlineCode",{parentName:"p"},"mongod")," process"),(0,o.kt)("h3",{id:"closehandler"},"closeHandler"),(0,o.kt)("span",{class:"badge badge--warning"},"Internal"),(0,o.kt)("p",null,"Typings: ",(0,o.kt)("inlineCode",{parentName:"p"},"closeHandler(code: number, signal: string): void")),(0,o.kt)("p",null,"Close handler for the ",(0,o.kt)("inlineCode",{parentName:"p"},"mongod")," process"),(0,o.kt)("h3",{id:"stderrhandler"},"stderrHandler"),(0,o.kt)("span",{class:"badge badge--warning"},"Internal"),(0,o.kt)("p",null,"Typings: ",(0,o.kt)("inlineCode",{parentName:"p"},"stderrHandler(message: string | Buffer): void")),(0,o.kt)("p",null,"STDERR handler for the ",(0,o.kt)("inlineCode",{parentName:"p"},"mongod")," process"),(0,o.kt)("h3",{id:"stdouthandler"},"stdoutHandler"),(0,o.kt)("span",{class:"badge badge--warning"},"Internal"),(0,o.kt)("p",null,"Typings: ",(0,o.kt)("inlineCode",{parentName:"p"},"stdoutHandler(message: string | Buffer): void")),(0,o.kt)("p",null,"STDOUT handler for the ",(0,o.kt)("inlineCode",{parentName:"p"},"mongod")," process",(0,o.kt)("br",{parentName:"p"}),"\n","Matches process output against known formats and raise events"),(0,o.kt)("h2",{id:"values"},"Values"),(0,o.kt)("h3",{id:"instanceopts"},"instanceOpts"),(0,o.kt)("p",null,"Typings: ",(0,o.kt)("inlineCode",{parentName:"p"},"instanceOpts: MongoInstanceOpts")),(0,o.kt)("p",null,"Stores the Instance Options"),(0,o.kt)("h3",{id:"binaryopts"},"binaryOpts"),(0,o.kt)("p",null,"Typings: ",(0,o.kt)("inlineCode",{parentName:"p"},"readonly binaryOpts: Readonly<MongoBinaryOpts>")),(0,o.kt)("p",null,"Stores the Binary Options"),(0,o.kt)("h3",{id:"spawnopts"},"spawnOpts"),(0,o.kt)("p",null,"Typings: ",(0,o.kt)("inlineCode",{parentName:"p"},"readonly spawnOpts: Readonly<SpawnOptions>")),(0,o.kt)("p",null,"Stores the Spawn Options"),(0,o.kt)("h3",{id:"extraconnectionoptions"},"extraConnectionOptions"),(0,o.kt)("span",{class:"badge badge--warning"},"Internal"),(0,o.kt)("p",null,"Typings: ",(0,o.kt)("inlineCode",{parentName:"p"},"extraConnectionOptions?: MongoClientOptions")),(0,o.kt)("p",null,"Contains extra Connection options used for ",(0,o.kt)("inlineCode",{parentName:"p"},"mongoClient.connect"),", this is mainly used for authentication"),(0,o.kt)("h3",{id:"mongodprocess"},"mongodProcess"),(0,o.kt)("span",{class:"badge badge--warning"},"Internal"),(0,o.kt)("p",null,"Typings: ",(0,o.kt)("inlineCode",{parentName:"p"},"mongodProcess?: ChildProcess")),(0,o.kt)("p",null,"Stores the active process reference for the ",(0,o.kt)("inlineCode",{parentName:"p"},"mongod")," process"),(0,o.kt)("h3",{id:"killerprocess"},"killerProcess"),(0,o.kt)("span",{class:"badge badge--warning"},"Internal"),(0,o.kt)("p",null,"Typings: ",(0,o.kt)("inlineCode",{parentName:"p"},"killerProcess?: ChildProcess")),(0,o.kt)("p",null,"Stores the active process reference for the killer process"),(0,o.kt)("h3",{id:"isinstanceprimary"},"isInstancePrimary"),(0,o.kt)("p",null,"Typings: ",(0,o.kt)("inlineCode",{parentName:"p"},"isInstancePrimary: boolean")),(0,o.kt)("p",null,"Stores that the process is an Primary (ReplSet) (event emitted when found in STDOUT)"),(0,o.kt)("h3",{id:"isinstanceready"},"isInstanceReady"),(0,o.kt)("p",null,"Typings: ",(0,o.kt)("inlineCode",{parentName:"p"},"isInstanceReady: boolean")," (event emitted when found in STDOUT)"),(0,o.kt)("p",null,"Stores that the process is fully started"),(0,o.kt)("h3",{id:"isreplset"},"isReplSet"),(0,o.kt)("p",null,"Typings: ",(0,o.kt)("inlineCode",{parentName:"p"},"isReplSet: boolean")),(0,o.kt)("p",null,"Stores that the process is in an ReplSet, is ",(0,o.kt)("inlineCode",{parentName:"p"},"true")," when ",(0,o.kt)("a",{parentName:"p",href:"#instanceopts"},(0,o.kt)("inlineCode",{parentName:"a"},"instanceOpts.replSet"))," is defined and truthy"))}g.isMDXComponent=!0}}]);